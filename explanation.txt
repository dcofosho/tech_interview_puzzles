-Question 1: Given two strings s and t, determine whether some anagram of t is a substring of s

Solution: The anagram test helper function takes 2 input strings makes a letter-count dictionary for each. If the dictionaries are equal to each other, they are anagrams. The question1 function iterates through substrings of s with length len(t) and performs the anagram test until an anagram is found, in which case the function returns true. If the function reaches the end of s without finding an anagram, it returns false.


-Question 2: Given a string a, find the longest palindromic substring contained in a.

Solution: The question2 function iterates every substring of a in O(n^2) time, checks if each substring is a palindrome. Palindromic substrings are stored in an lps variable, which is updated every time a longer palindrome is found.

-Question 3: Find the minimum spanning tree of a weighted undirected graph

Solution: The question3 function is an implementation of Kruslak's algorithm. This sorts the edges by weight, and from lowest to highest weight adds edges to the mst if the edges do not create a cycle. Cycles are detected using the disjoint set/union find algorithm. This algorithm stores each node's value in a set, the sets being stored in a disjoint superset. The algorithm then iterates through edges and checks if the nodes are in the same set. If not, the sets containing the two nodes are combined into a single set with a union operation. If the two nodes are in the same set, then a cycle is detected.

-Question 4: Find the least common ancestor between two nodes on a binary search tree.

Solution: This solution represents the bst as a series of nodes with values, and left/right nodes which are initialized to None. A bst is then created by stringing together node objects and assigning left and right values. Starting at the root, the question4 function checks each node to see if the value is higher or lower than both input nodes. If value is higher than both, the function proceeds to the left node, if lower the right. If the node's value is between the values of node1 and node2, then that node is the lca of node1 and node2

-Question5: Find the element in a singly linked list that's m elements from the end. 

Solution: The question5 function iterates through the linked list, appending the values to an array (orderedList). The function then returns the array element at index len(orderedList)-m-1